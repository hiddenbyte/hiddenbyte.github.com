<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on hiddenbyte.log</title><link>https://mehul.pt/posts/</link><description>Recent content in Posts on hiddenbyte.log</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Jul 2020 23:34:56 +0100</lastBuildDate><atom:link href="https://mehul.pt/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Digging into Goroutines I</title><link>https://mehul.pt/posts/digging-into-goroutines-1/</link><pubDate>Sun, 05 Jul 2020 23:34:56 +0100</pubDate><guid>https://mehul.pt/posts/digging-into-goroutines-1/</guid><description>Go enables writing programs with concurrent threads of execution. And it does so by introducing the concept of goroutine.
A goroutine has a simple model: it is a function executing concurrently with other goroutines in the same address space.
in Effective Go
Before digging into goroutines, having an understanding on &amp;ldquo;how&amp;rdquo; the Go compiler and runtime work together in order to launch a goroutine will pave the path to its internals.</description></item></channel></rss>